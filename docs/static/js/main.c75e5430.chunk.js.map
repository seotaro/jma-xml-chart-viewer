{"version":3,"sources":["utils.js","settings.js","components/ChartTitle.js","components/ChartTypeSelector.js","App.js","reportWebVitals.js","index.js"],"names":["latlonline","lines","lon","lat","push","start","end","properties","type","name","Math","abs","getFronts","geojson","ret","features","feature","i","geometry","coordinates","length","even","odd","filter","line","parseInt","getIsobars","pressure","value","isobar","getCenters","targets","x","includes","getStrongWinds","getIces","getFogs","settings","chartTypes","code","chart","color","lineWidth","isStroke","text","iconSize","textSize","isFill","initialViewState","longitude","latitude","zoom","api","jmaxml","xml2chart","latlonLineLayer","mapLayer","url","backgroundLayer","windArrowLayer","iconAtlas","iconMapping","centerMarkLayer","ChartTitle","props","className","title","moment","basetime","format","validtime","ChartTypeSelector","React","useState","Object","keys","types","setType","items","map","key","MenuItem","FormControl","InputLabel","id","Select","labelId","onChange","e","target","handleChangeType","App","setChart","chartType","setChartType","useEffect","a","LATEST_URL","fetch","then","res","JSON","parse","latest","isobars","fronts","ices","fogs","windArrows","centerMarks","catch","err","console","error","chartTitle","chartGeoJsonLayers","data","stroked","d","filled","getFillColor","getLineColor","pointRadiusUnits","pointRadiusScale","getRadius","radius","lineWidthUnits","lineWidthScale","getLineWidth","parameters","cull","characterSet","k","chartTextLayers","getPosition","getSize","getText","getTextAnchor","getAlignmentBaseline","getColor","billboard","getAngle","getPixelOffset","sizeUnits","getIcon","windSpeedKnot","windDegree","controller","getPolygon","getSourcePosition","getTargetPosition","getWidth","width","resolution","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75e5430.chunk.js","sourcesContent":["\n// LineLayer の緯線経線データを返す。\nexport const latlonline = (() => {\n    const d = 1;  // [°]。精度みたいなもの。\n    const dlon = 10;  // [°]。\n    const dlat = 10;  // [°]。\n    const lines = [];\n\n    // 経線\n    for (let lon = -180; lon < 180; lon += dlon) {\n        for (let lat = -80; lat < 80; lat += d) {\n            lines.push({ start: [lon, lat], end: [lon, lat + d], properties: { type: '経線', name: `${Math.abs(lon)}°${(lon < 0) ? 'W' : 'E'}` } });\n        }\n    }\n\n    // 緯線\n    for (let lat = -80; lat < 90; lat += dlat) {\n        for (let lon = -180; lon < 180; lon += d) {\n            lines.push({ start: [lon, lat], end: [lon + d, lat], properties: { type: '緯線', name: `${Math.abs(lat)}°${(lat < 0) ? 'S' : 'N'}` } });\n        }\n    }\n\n    return lines;\n})();\n\n// 前線を返す。\nexport function getFronts(geojson) {\n    const STATIONARY_FRONT_SPACE = 20;  // 停滞前線の奇数偶数区間の間隔\n\n    const ret = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '寒冷前線':\n            case '温暖前線':\n            case '閉塞前線':\n                ret.push(feature);\n                break;\n\n            case '停滞前線':\n                {\n                    // 偶数区間と奇数区間を交互に色分けする表現。破線にした feature を生成して追加する。元の'停滞前線'は削除する。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    const even = { ...feature };\n                    const odd = { ...feature };\n                    odd.properties = { ...feature.properties };\n                    even.properties = { ...feature.properties };\n                    odd.geometry = { ...feature.geometry };\n                    even.geometry = { ...feature.geometry };\n                    odd.properties.type = '停滞前線（奇数）';\n                    even.properties.type = '停滞前線（偶数）';\n                    odd.geometry.type = 'MultiLineString';\n                    even.geometry.type = 'MultiLineString';\n                    odd.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 === 0));\n                    even.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 !== 0));\n\n                    ret.push(odd);\n                    ret.push(even);\n                }\n                break;\n        }\n    }\n\n    return ret;\n}\n\n// 等圧線を返す。\nexport function getIsobars(geojson) {\n    const AUXILIARY_ISOBAR_SPACE = 10;  // 等圧線の補助線の破線間隔\n\n    const ret = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '等圧線':\n                // レンダリングに必要な情報を補足する。\n\n                if ((feature.properties.pressure.value % 20) === 0) {\n                    // 20hPa 毎の主線。元の feature を上書きする。\n                    const isobar = { ...feature }\n                    isobar.properties.type = '等圧線（主線）';\n                    ret.push(isobar);\n\n                } else if (feature.properties.pressure.value % 4) {\n                    // 補助線。元の feature を破線で上書きする。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    const isobar = { ...feature }\n                    isobar.properties.type = '等圧線（補助）';\n                    isobar.geometry.type = 'MultiLineString';\n                    isobar.geometry.coordinates = lines.filter((line, i) => (parseInt(i / AUXILIARY_ISOBAR_SPACE) % 2 === 0));\n                    ret.push(isobar);\n\n                } else {\n                    ret.push(feature);\n                }\n                break;\n        }\n    }\n\n    return ret;\n}\n\n// 高気圧・低気圧などの中心マークを返す。\nexport function getCenters(geojson) {\n    const targets = ['台風', '低気圧', '高気圧', '熱帯低気圧', '低圧部'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}\n\n// 悪天情報の強風を返す。\nexport function getStrongWinds(geojson) {\n    const targets = ['悪天情報（強風）'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}\n\n// 悪天情報の海氷・船体着氷を返す。\nexport function getIces(geojson) {\n    const targets = ['悪天情報（海氷）', '悪天情報（船体着氷）'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}\n\n// 悪天情報の霧を返す。\nexport function getFogs(geojson) {\n    const targets = ['悪天情報（霧）'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}","\nexport const settings = {\n    chartTypes: {\n        'VZSA50': { name: '地上実況図', code: 'SPAS' },\n        'VZSA60': { name: 'アジア太平洋地上実況図', code: 'ASAS' },\n        'VZSF50': { name: '地上24時間予想図', code: 'FSAS24' },\n        'VZSF60': { name: 'アジア太平洋海上悪天24時間予想図', code: 'FSAS24' },\n        'VZSF51': { name: '地上48時間予想図', code: 'FSAS48' },\n        'VZSF61': { name: 'アジア太平洋海上悪天48時間予想図', code: 'FSAS48' },\n    },\n    chart: {\n        '等圧線': { color: [222, 222, 222], lineWidth: 2, isStroke: true },\n        '等圧線（主線）': { color: [222, 222, 222], lineWidth: 4, isStroke: true },\n        '等圧線（補助）': { color: [222, 222, 222], lineWidth: 2, isStroke: true, },\n        '寒冷前線': { color: [32, 32, 255], lineWidth: 4, isStroke: true },\n        '温暖前線': { color: [255, 32, 32], lineWidth: 4, isStroke: true },\n        '停滞前線（奇数）': { color: [255, 32, 32], lineWidth: 4, isStroke: true },\n        '停滞前線（偶数）': { color: [32, 32, 255], lineWidth: 4, isStroke: true },\n        '閉塞前線': { color: [128, 0, 255], lineWidth: 4, isStroke: true },\n        '台風': { text: '台', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '高気圧': { text: '高', color: [32, 32, 255], iconSize: 10, textSize: 25 },\n        '低気圧': { text: '低', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '熱帯低気圧': { text: '熱', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '低圧部': { text: '低', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '悪天情報（強風）': { color: [127, 127, 127], iconSize: 25 },\n        '悪天情報（霧）': { color: [255, 255, 128, 127], isFill: true },\n        '悪天情報（海氷）': { color: [192, 192, 255, 127], isFill: true },\n        '悪天情報（船体着氷）': { color: [192, 192, 255, 127], isFill: true },\n    },\n    initialViewState: {\n        longitude: 140.0,\n        latitude: 40.0,\n        zoom: 1.2,\n    },\n    api: {\n        jmaxml: 'https://jma-xml-api-mrfbzypr4q-an.a.run.app',\n        xml2chart: 'https://xml2chart-api-mrfbzypr4q-an.a.run.app',\n    },\n    latlonLineLayer: {\n        color: [127, 127, 127]\n    },\n    mapLayer: {\n        color: [64, 64, 64],\n        url: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_land.geojson'\n    },\n    backgroundLayer: {\n        color: [32, 32, 32]\n    },\n    windArrowLayer: {\n        iconAtlas: 'chart-wind-arrow.png',\n        iconMapping: 'chart-wind-arrow.json'\n    },\n    centerMarkLayer: {\n        iconAtlas: 'chart-center-mark.png',\n        iconMapping: 'chart-center-mark.json'\n    },\n\n\n};\n","import React from 'react';\nimport './ChartTitle.css';\nimport moment from 'moment';\n\nfunction ChartTitle(props) {\n\n  return (\n    <article className='ChartTitle'>\n      <h1>{props.title.title} {props.title.code}（{props.title.type}）</h1>\n      <p>basetime : {moment(props.title.basetime).format()}</p>\n      <p>validtime : {moment(props.title.validtime).format()}</p>\n    </article>\n  );\n}\n\nexport default ChartTitle;\n","import React from 'react';\nimport './ChartTypeSelector.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nfunction ChartTypeSelector(props) {\n  const [type, setType] = React.useState(Object.keys(props.types)[0]);\n\n  const items = Object.keys(props.types).map(key => <MenuItem key={key} value={key}>{key}</MenuItem>);\n\n  const onChange = (e) => {\n    setType(e.target.value);\n    return props.handleChangeType(e.target.value)\n  }\n\n  return (\n    <article className='ChartTypeSelector'>\n      <FormControl >\n        <InputLabel id=\"chartselector-select-label\">jmaxml type</InputLabel>\n        <Select labelId=\"chartselector-select-label\"\n          value={type}\n          onChange={e => onChange(e)} >\n          {items}\n        </Select>\n      </FormControl>\n    </article>\n  );\n}\n\nexport default ChartTypeSelector;\n","import './App.css';\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, SolidPolygonLayer, LineLayer, TextLayer, IconLayer } from '@deck.gl/layers';\nimport { _GlobeView as GlobeView, MapView } from '@deck.gl/core';\nimport { latlonline, getFronts, getIsobars, getStrongWinds, getCenters, getIces, getFogs } from './utils'\nimport { settings } from './settings'\nimport ChartTitle from './components/ChartTitle'\nimport ChartTypeSelector from './components/ChartTypeSelector'\n\nfunction App() {\n  const [chart, setChart] = useState(null);\n  const [chartType, setChartType] = useState(Object.keys(settings.chartTypes)[0]);\n\n  useEffect(() => {\n    (async () => {\n      const LATEST_URL = `${settings.api.jmaxml}/${chartType}/latest.json`;\n\n      const chart = await fetch(LATEST_URL)\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(latest => {\n          return fetch(`${settings.api.xml2chart}/?url=${latest[0].url}`)\n        })\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(geojson => {\n          // レンダリングに必要な情報を補足する。\n          const title = { ...geojson.properties, type: chartType, code: settings.chartTypes[chartType].code };\n          const isobars = getIsobars(geojson);\n          const fronts = getFronts(geojson);\n          const ices = getIces(geojson);\n          const fogs = getFogs(geojson);\n          const windArrows = getStrongWinds(geojson);\n          const centerMarks = getCenters(geojson);\n          return { fronts: fronts, isobars: isobars, title: title, windArrows: windArrows, centerMarks: centerMarks, ices: ices, fogs: fogs };\n        })\n        .catch((err) => {\n          console.error(`${err}`);\n        });\n\n      setChart(chart);\n    })();\n  }, [chartType]);\n\n\n  const chartTitle = chart && (<ChartTitle title={chart.title} />);\n\n  const chartGeoJsonLayers = chart && ([\n    { id: `chart-ice-layer`, data: chart.ices },\n    { id: `chart-fog-layer`, data: chart.fogs },\n    { id: `chart-isobar-layer`, data: chart.isobars },\n    { id: `chart-front-layer`, data: chart.fronts },\n  ]).map(x => {\n    return (<GeoJsonLayer id={x.id}\n      data={x.data}\n      stroked={d => settings.chart[d.properties.type].isStroke ? settings.chart[d.properties.type].isStroke : false}\n      filled={d => settings.chart[d.properties.type].isFill ? settings.chart[d.properties.type].isFill : false}\n      getFillColor={d => settings.chart[d.properties.type].color}\n      getLineColor={d => settings.chart[d.properties.type].color}\n      pointRadiusUnits={'pixels'}\n      pointRadiusScale={1}\n      getRadius={d => settings.chart[d.properties.type].radius ? settings.chart[d.properties.type].radius : 0}\n      lineWidthUnits={'pixels'}\n      lineWidthScale={1}\n      getLineWidth={d => settings.chart[d.properties.type].lineWidth ? settings.chart[d.properties.type].lineWidth : 0}\n      parameters={{ cull: true }}\n    />)\n  })\n\n\n  const characterSet = Object.keys(settings.chart).map(k => settings.chart[k]).filter(x => x.text).map(x => x.text);\n  const chartTextLayers = chart && (\n    <TextLayer id={`chart-text-layer`}\n      data={chart.centerMarks}\n      getPosition={d => d.geometry.coordinates}\n      getSize={d => settings.chart[d.properties.type].textSize}\n      getText={d => settings.chart[d.properties.type].text}\n      characterSet={characterSet}\n      getTextAnchor={'middle'}\n      getAlignmentBaseline={'center'}\n      getColor={d => settings.chart[d.properties.type].color}\n      billboard={false}\n      getAngle={d => 180.0}\n      getPixelOffset={[-20, -20]}\n    />\n  );\n\n  const centerMarks = chart && (\n    < IconLayer id='chart-center-mark-layer'\n      data={chart.centerMarks}\n      sizeUnits={'pixels'}\n      iconAtlas={settings.centerMarkLayer.iconAtlas}\n      iconMapping={settings.centerMarkLayer.iconMapping}\n      getIcon={d => 'center'}\n      getPosition={d => d.geometry.coordinates}\n      getSize={d => settings.chart[d.properties.type].iconSize}\n      getColor={d => settings.chart[d.properties.type].color}\n      billboard={false}\n    />\n  );\n\n  const windArrows = chart && (\n    < IconLayer id='chart-wind-arrow-layer'\n      data={chart.windArrows}\n      sizeUnits={'pixels'}\n      iconAtlas={settings.windArrowLayer.iconAtlas}\n      iconMapping={settings.windArrowLayer.iconMapping}\n      getIcon={d => d.properties.windSpeedKnot.value}\n      getPosition={d => d.geometry.coordinates}\n      getSize={d => settings.chart[d.properties.type].iconSize}\n      getColor={d => settings.chart[d.properties.type].color}\n      billboard={false}\n      getAngle={d => 360.0 - d.properties.windDegree.value}\n    />\n  );\n\n  return (\n    <Fragment>\n      {chartTitle}\n\n      <ChartTypeSelector\n        types={settings.chartTypes}\n        handleChangeType={(async (type) => { setChartType(type); })} />\n\n      <DeckGL\n        initialViewState={settings.initialViewState}\n        controller={true}\n      >\n\n        <SolidPolygonLayer id='background-layer'\n          data={[[[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]]}\n          getPolygon={d => d}\n          filled={true}\n          getFillColor={settings.backgroundLayer.color}\n        />\n\n        <GeoJsonLayer id=\"map-layer\"\n          data={settings.mapLayer.url}\n          filled={true}\n          getFillColor={settings.mapLayer.color}\n        />\n\n        < LineLayer id='latlon-line-layer'\n          data={latlonline}\n          getSourcePosition={d => d.start}\n          getTargetPosition={d => d.end}\n          getColor={settings.latlonLineLayer.color}\n          getWidth={1}\n        />\n\n        {chartGeoJsonLayers}\n        {centerMarks}\n        {windArrows}\n        {chartTextLayers}\n\n        <GlobeView id=\"map\" width=\"100%\" controller={true} resolution={1} />\n      </DeckGL>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}