{"version":3,"sources":["utils.js","settings.js","components/ChartTitle.js","components/ChartTypeSelector.js","App.js","reportWebVitals.js","index.js"],"names":["latlonlineGeoJson","geojson","type","features","lon","coordinates","lat","push","feature","id","length","geometry","properties","info","Math","abs","getFronts","ret","front","lines","i","even","odd","filter","line","parseInt","getIsobars","isobar","pressure","value","unit","getCenters","targets","x","includes","map","xx","number","nameKana","class","speed","direction","windSpeed","getStrongWinds","windSpeedKnot","getIces","getFogs","settings","chartTypes","name","code","chart","color","lineWidth","isStroke","text","iconSize","textSize","isFill","initialViewState","longitude","latitude","zoom","api","jmaxml","xml2geojson","latlonLineLayer","mapLayer","url","backgroundLayer","windArrowLayer","iconAtlas","iconMapping","centerMarkLayer","highlight","ChartTitle","props","className","title","moment","basetime","format","validtime","ChartTypeSelector","React","useState","Object","keys","types","setType","items","key","MenuItem","FormControl","InputLabel","Select","labelId","onChange","e","target","handleChangeType","App","setChart","chartType","setChartType","useEffect","a","LATEST_URL","fetch","then","res","JSON","parse","latest","isobars","fronts","ices","fogs","windArrows","centerMarks","catch","err","console","error","chartTitle","chartGeoJsonLayers","data","stroked","d","filled","getFillColor","getLineColor","pointRadiusUnits","pointRadiusScale","getRadius","radius","lineWidthUnits","lineWidthScale","getLineWidth","parameters","cull","pickable","highlightColor","autoHighlight","characterSet","k","chartTextLayers","getPosition","getSize","getText","getTextAnchor","getAlignmentBaseline","getColor","billboard","getAngle","getPixelOffset","sizeUnits","getIcon","windDegree","controller","getTooltip","object","getCursor","isHovering","getPolygon","width","resolution","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ded1be80.chunk.js","sourcesContent":["\n// LineLayer の緯線経線データを返す。\nexport const latlonlineGeoJson = (() => {\n    const d = 1;  // [°]。精度みたいなもの。\n    const dlon = 10;  // [°]。\n    const dlat = 10;  // [°]。\n\n    const geojson = {\n        type: \"FeatureCollection\",\n        features: [],\n    };\n\n    // 経線\n    for (let lon = 180; -180 < lon; lon -= dlon) {\n        const coordinates = [];\n        for (let lat = -80; lat <= 80; lat += d) {\n            coordinates.push([lon, lat]);\n        }\n\n        const feature = {\n            type: \"Feature\",\n            id: geojson.features.length,\n            geometry: { type: 'LineString', coordinates: coordinates },\n            properties: {},\n            info: `${Math.abs(lon)}°${(lon < 0) ? 'W' : 'E'}`\n        };\n        geojson.features.push(feature);\n    }\n\n    // 緯線\n    for (let lat = -80; lat < 90; lat += dlat) {\n        const coordinates = [];\n        for (let lon = -180; lon <= 180; lon += d) {\n            coordinates.push([lon, lat]);\n        }\n\n        const feature = {\n            type: \"Feature\",\n            id: geojson.features.length,\n            geometry: { type: 'LineString', coordinates: coordinates },\n            properties: {},\n            info: `${Math.abs(lat)}°${(lat < 0) ? 'S' : 'N'}`\n        };\n        geojson.features.push(feature);\n    }\n\n    return geojson;\n})();\n\n// 前線を返す。\nexport function getFronts(geojson) {\n    const STATIONARY_FRONT_SPACE = 20;  // 停滞前線の奇数偶数区間の間隔\n\n    const ret = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '寒冷前線':\n            case '温暖前線':\n            case '閉塞前線':\n                const front = { ...feature };\n                front.info = `${feature.properties.type}`;\n                ret.push(front);\n                break;\n\n            case '停滞前線':\n                {\n                    // 偶数区間と奇数区間を交互に色分けする表現。破線にした feature を生成して追加する。元の'停滞前線'は削除する。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    const even = { ...feature };\n                    const odd = { ...feature };\n                    odd.properties = { ...feature.properties };\n                    even.properties = { ...feature.properties };\n                    odd.geometry = { ...feature.geometry };\n                    even.geometry = { ...feature.geometry };\n                    odd.properties.type = '停滞前線（奇数）';\n                    even.properties.type = '停滞前線（偶数）';\n                    odd.geometry.type = 'MultiLineString';\n                    even.geometry.type = 'MultiLineString';\n                    odd.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 === 0));\n                    even.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 !== 0));\n                    odd.info = `${feature.properties.type}`;\n                    even.info = `${feature.properties.type}`;\n\n                    ret.push(odd);\n                    ret.push(even);\n                }\n                break;\n        }\n    }\n\n    return ret;\n}\n\n// 等圧線を返す。\nexport function getIsobars(geojson) {\n    const AUXILIARY_ISOBAR_SPACE = 10;  // 等圧線の補助線の破線間隔\n\n    const ret = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '等圧線':\n                // レンダリングに必要な情報を補足する。\n\n                const isobar = { ...feature };\n                isobar.info = `等圧線（${isobar.properties.pressure.value} ${isobar.properties.pressure.unit}）`;\n\n                if ((isobar.properties.pressure.value % 20) === 0) {\n                    // 20hPa 毎の主線。\n                    isobar.properties.type = '等圧線（主線）';\n                    ret.push(isobar);\n\n                } else if (isobar.properties.pressure.value % 4) {\n                    // 補助線。\n\n                    const lines = [];\n                    for (let i = 0; i < (isobar.geometry.coordinates.length - 1); i++) {\n                        lines.push([isobar.geometry.coordinates[i], isobar.geometry.coordinates[i + 1]]);\n                    }\n\n                    isobar.properties.type = '等圧線（補助）';\n                    isobar.geometry.type = 'MultiLineString';\n                    isobar.geometry.coordinates = lines.filter((line, i) => (parseInt(i / AUXILIARY_ISOBAR_SPACE) % 2 === 0));\n                    ret.push(isobar);\n                }\n\n                ret.push(isobar);\n                break;\n        }\n    }\n\n    return ret;\n}\n\n// 高気圧・低気圧などの中心マークを返す。\nexport function getCenters(geojson) {\n    const targets = ['台風', '低気圧', '高気圧', '熱帯低気圧', '低圧部'];\n    return geojson.features\n        .filter(x => targets.includes(x.properties.type))\n        .map(x => {\n            const xx = { ...x };\n            if (xx.properties.type === '台風') {\n                xx.info = `${xx.properties.type}（\\n\\\n                                T${xx.properties.number} \\n名称 : ${xx.properties.nameKana} \\n階級 : ${xx.properties.class}\n                                中心気圧 : ${xx.properties.pressure.value} ${xx.properties.pressure.unit} \\n\\\n                                進行速度 : ${xx.properties.speed.value} ${xx.properties.speed.unit} \\n\\\n                                進行方向 : ${xx.properties.direction.value} ${xx.properties.direction.unit} \\n\\\n                                風速 : ${xx.properties.windSpeed.value} ${xx.properties.windSpeed.unit}\\n）`;\n            } else {\n                xx.info = `${xx.properties.type}（\\n\\\n                                中心気圧 : ${xx.properties.pressure.value} ${xx.properties.pressure.unit} \\n\\\n                                進行速度 : ${xx.properties.speed.value} ${xx.properties.speed.unit} \\n\\\n                                進行方向 : ${xx.properties.direction.value} ${xx.properties.direction.unit} \\n）`;\n            }\n            return xx;\n        });\n}\n\n// 悪天情報の強風を返す。\nexport function getStrongWinds(geojson) {\n    const targets = ['悪天情報（強風）'];\n    return geojson.features\n        .filter(x => targets.includes(x.properties.type))\n        .map(x => {\n            const xx = { ...x };\n            xx.info = `${xx.properties.type}（${xx.properties.windSpeedKnot.value} ${xx.properties.windSpeedKnot.unit}）`;\n            return xx;\n        });\n\n}\n\n// 悪天情報の海氷・船体着氷を返す。\nexport function getIces(geojson) {\n    const targets = ['悪天情報（海氷）', '悪天情報（船体着氷）'];\n    return geojson.features\n        .filter(x => targets.includes(x.properties.type))\n        .map(x => {\n            const xx = { ...x };\n            xx.info = `${xx.properties.type}`;\n            return xx;\n        });\n}\n\n// 悪天情報の霧を返す。\nexport function getFogs(geojson) {\n    const targets = ['悪天情報（霧）'];\n    return geojson.features\n        .filter(x => targets.includes(x.properties.type))\n        .map(x => {\n            const xx = { ...x };\n            xx.info = `${xx.properties.type}`;\n            return xx;\n        });;\n}","\nexport const settings = {\n    chartTypes: {\n        'VZSA50': { name: '地上実況図', code: 'SPAS' },\n        'VZSA60': { name: 'アジア太平洋地上実況図', code: 'ASAS' },\n        'VZSF50': { name: '地上24時間予想図', code: 'FSAS24' },\n        'VZSF60': { name: 'アジア太平洋海上悪天24時間予想図', code: 'FSAS24' },\n        'VZSF51': { name: '地上48時間予想図', code: 'FSAS48' },\n        'VZSF61': { name: 'アジア太平洋海上悪天48時間予想図', code: 'FSAS48' },\n    },\n    chart: {\n        '等圧線': { color: [222, 222, 222], lineWidth: 2, isStroke: true },\n        '等圧線（主線）': { color: [222, 222, 222], lineWidth: 4, isStroke: true },\n        '等圧線（補助）': { color: [222, 222, 222], lineWidth: 2, isStroke: true, },\n        '寒冷前線': { color: [32, 32, 255], lineWidth: 4, isStroke: true },\n        '温暖前線': { color: [255, 32, 32], lineWidth: 4, isStroke: true },\n        '停滞前線（奇数）': { color: [255, 32, 32], lineWidth: 4, isStroke: true },\n        '停滞前線（偶数）': { color: [32, 32, 255], lineWidth: 4, isStroke: true },\n        '閉塞前線': { color: [128, 0, 255], lineWidth: 4, isStroke: true },\n        '台風': { text: '台', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '高気圧': { text: '高', color: [32, 32, 255], iconSize: 10, textSize: 25 },\n        '低気圧': { text: '低', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '熱帯低気圧': { text: '熱', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '低圧部': { text: '低', color: [255, 32, 32], iconSize: 10, textSize: 25 },\n        '悪天情報（強風）': { color: [127, 127, 127], iconSize: 25 },\n        '悪天情報（霧）': { color: [255, 255, 128, 127], isFill: true },\n        '悪天情報（海氷）': { color: [192, 192, 255, 127], isFill: true },\n        '悪天情報（船体着氷）': { color: [192, 192, 255, 127], isFill: true },\n    },\n    initialViewState: {\n        longitude: 140.0,\n        latitude: 40.0,\n        zoom: 1.2,\n    },\n    api: {\n        jmaxml: 'https://jma-xml-api-mrfbzypr4q-an.a.run.app',\n        xml2geojson: 'https://xml2geojson-api-mrfbzypr4q-an.a.run.app',\n    },\n    latlonLineLayer: {\n        color: [127, 127, 127]\n    },\n    mapLayer: {\n        color: [64, 64, 64],\n        url: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_land.geojson'\n    },\n    backgroundLayer: {\n        color: [32, 32, 32]\n    },\n    windArrowLayer: {\n        iconAtlas: 'chart-wind-arrow.png',\n        iconMapping: 'chart-wind-arrow.json'\n    },\n    centerMarkLayer: {\n        iconAtlas: 'chart-center-mark.png',\n        iconMapping: 'chart-center-mark.json'\n    },\n    highlight: {\n        color: [255, 127, 127, 127]\n    }\n\n};\n","import React from 'react';\nimport './ChartTitle.css';\nimport moment from 'moment';\n\nfunction ChartTitle(props) {\n\n  return (\n    <article className='ChartTitle'>\n      <h1>{props.title.title} {props.title.code}（{props.title.type}）</h1>\n      <p>basetime : {moment(props.title.basetime).format()}</p>\n      <p>validtime : {moment(props.title.validtime).format()}</p>\n    </article>\n  );\n}\n\nexport default ChartTitle;\n","import React from 'react';\nimport './ChartTypeSelector.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nfunction ChartTypeSelector(props) {\n  const [type, setType] = React.useState(Object.keys(props.types)[0]);\n\n  const items = Object.keys(props.types).map(key => <MenuItem key={key} value={key}>{key}</MenuItem>);\n\n  const onChange = (e) => {\n    setType(e.target.value);\n    return props.handleChangeType(e.target.value)\n  }\n\n  return (\n    <article className='ChartTypeSelector'>\n      <FormControl >\n        <InputLabel id=\"chartselector-select-label\">jmaxml type</InputLabel>\n        <Select labelId=\"chartselector-select-label\"\n          value={type}\n          onChange={e => onChange(e)} >\n          {items}\n        </Select>\n      </FormControl>\n    </article>\n  );\n}\n\nexport default ChartTypeSelector;\n","import './App.css';\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, SolidPolygonLayer, LineLayer, TextLayer, IconLayer } from '@deck.gl/layers';\nimport { _GlobeView as GlobeView, MapView } from '@deck.gl/core';\nimport { getFronts, getIsobars, getStrongWinds, getCenters, getIces, getFogs, latlonlineGeoJson } from './utils'\nimport { settings } from './settings'\nimport ChartTitle from './components/ChartTitle'\nimport ChartTypeSelector from './components/ChartTypeSelector'\n\nfunction App() {\n  const [chart, setChart] = useState(null);\n  const [chartType, setChartType] = useState(Object.keys(settings.chartTypes)[0]);\n\n  useEffect(() => {\n    (async () => {\n      const LATEST_URL = `${settings.api.jmaxml}/${chartType}/latest.json`;\n\n      const chart = await fetch(LATEST_URL)\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(latest => {\n          return fetch(`${settings.api.xml2geojson}/?url=${latest[0].url}`)\n        })\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(geojson => {\n          // 要素毎にレイヤーに分ける。\n          const title = { ...geojson.properties, type: chartType, code: settings.chartTypes[chartType].code };\n          const isobars = getIsobars(geojson);\n          const fronts = getFronts(geojson);\n          const ices = getIces(geojson);\n          const fogs = getFogs(geojson);\n          const windArrows = getStrongWinds(geojson);\n          const centerMarks = getCenters(geojson);\n          return { fronts: fronts, isobars: isobars, title: title, windArrows: windArrows, centerMarks: centerMarks, ices: ices, fogs: fogs };\n        })\n        .catch((err) => {\n          console.error(`${err}`);\n        });\n\n      setChart(chart);\n    })();\n  }, [chartType]);\n\n\n  const chartTitle = chart && (<ChartTitle title={chart.title} />);\n\n  const chartGeoJsonLayers = chart && ([\n    { id: `chart-ice-layer`, data: chart.ices },\n    { id: `chart-fog-layer`, data: chart.fogs },\n    { id: `chart-isobar-layer`, data: chart.isobars },\n    { id: `chart-front-layer`, data: chart.fronts },\n  ]).map(x => {\n    return (<GeoJsonLayer id={x.id}\n      data={x.data}\n      stroked={d => settings.chart[d.properties.type].isStroke ? settings.chart[d.properties.type].isStroke : false}\n      filled={d => settings.chart[d.properties.type].isFill ? settings.chart[d.properties.type].isFill : false}\n      getFillColor={d => settings.chart[d.properties.type].color}\n      getLineColor={d => settings.chart[d.properties.type].color}\n      pointRadiusUnits={'pixels'}\n      pointRadiusScale={1}\n      getRadius={d => settings.chart[d.properties.type].radius ? settings.chart[d.properties.type].radius : 0}\n      lineWidthUnits={'pixels'}\n      lineWidthScale={1}\n      getLineWidth={d => settings.chart[d.properties.type].lineWidth ? settings.chart[d.properties.type].lineWidth : 0}\n      parameters={{ cull: true }}\n\n      pickable={true}\n      highlightColor={settings.highlight.color}\n      autoHighlight={true}\n    />)\n  })\n\n\n  const characterSet = Object.keys(settings.chart).map(k => settings.chart[k]).filter(x => x.text).map(x => x.text);\n  const chartTextLayers = chart && (\n    <TextLayer id={`chart-text-layer`}\n      data={chart.centerMarks}\n      getPosition={d => d.geometry.coordinates}\n      getSize={d => settings.chart[d.properties.type].textSize}\n      getText={d => settings.chart[d.properties.type].text}\n      characterSet={characterSet}\n      getTextAnchor={'middle'}\n      getAlignmentBaseline={'center'}\n      getColor={d => settings.chart[d.properties.type].color}\n      billboard={false}\n      getAngle={d => 180.0}\n      getPixelOffset={[-20, -20]}\n    />\n  );\n\n  const centerMarks = chart && (\n    < IconLayer id='chart-center-mark-layer'\n      data={chart.centerMarks}\n      sizeUnits={'pixels'}\n      iconAtlas={settings.centerMarkLayer.iconAtlas}\n      iconMapping={settings.centerMarkLayer.iconMapping}\n      getIcon={d => 'center'}\n      getPosition={d => d.geometry.coordinates}\n      getSize={d => settings.chart[d.properties.type].iconSize}\n      getColor={d => settings.chart[d.properties.type].color}\n      billboard={false}\n\n      pickable={true}\n      highlightColor={settings.highlight.color}\n      autoHighlight={true}\n    />\n  );\n\n  const windArrows = chart && (\n    < IconLayer id='chart-wind-arrow-layer'\n      data={chart.windArrows}\n      sizeUnits={'pixels'}\n      iconAtlas={settings.windArrowLayer.iconAtlas}\n      iconMapping={settings.windArrowLayer.iconMapping}\n      getIcon={d => d.properties.windSpeedKnot.value}\n      getPosition={d => d.geometry.coordinates}\n      getSize={d => settings.chart[d.properties.type].iconSize}\n      getColor={d => settings.chart[d.properties.type].color}\n      billboard={false}\n      getAngle={d => 360.0 - d.properties.windDegree.value}\n\n      pickable={true}\n      highlightColor={settings.highlight.color}\n      autoHighlight={true}\n    />\n  );\n\n  return (\n    <Fragment>\n      {chartTitle}\n\n      <ChartTypeSelector\n        types={settings.chartTypes}\n        handleChangeType={(async (type) => { setChartType(type); })} />\n\n      <DeckGL\n        initialViewState={settings.initialViewState}\n        controller={true}\n        getTooltip={({ object }) => object && object.info}\n        getCursor={({ isHovering }) => isHovering ? 'pointer' : 'grab'}\n      >\n\n        <SolidPolygonLayer id='background-layer'\n          data={[[[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]]}\n          getPolygon={d => d}\n          filled={true}\n          getFillColor={settings.backgroundLayer.color}\n        />\n\n        <GeoJsonLayer id=\"map-layer\"\n          data={settings.mapLayer.url}\n          filled={true}\n          getFillColor={settings.mapLayer.color}\n        />\n\n        <GeoJsonLayer id=\"latlon-line-layer\"\n          data={latlonlineGeoJson}\n          stroked={true}\n          getLineColor={settings.latlonLineLayer.color}\n          lineWidthUnits={'pixels'}\n          lineWidthScale={1}\n          getLineWidth={1}\n\n          pickable={true}\n          highlightColor={settings.highlight.color}\n          autoHighlight={true}\n        />\n\n        {chartGeoJsonLayers}\n        {centerMarks}\n        {windArrows}\n        {chartTextLayers}\n\n        <GlobeView id=\"map\" width=\"100%\" controller={true} resolution={1} />\n      </DeckGL>\n    </Fragment >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}