{"version":3,"sources":["utils.js","settings.js","components/ChartTitle.js","components/ChartTypeSelector.js","App.js","reportWebVitals.js","index.js"],"names":["latlonline","lines","lon","lat","push","start","end","properties","type","name","Math","abs","getFronts","geojson","ret","features","feature","i","geometry","coordinates","length","even","odd","filter","line","parseInt","getIsobars","pressure","value","isobar","getCenters","targets","x","includes","getStrongWinds","getIces","getFogs","settings","color","lineWidth","isStroke","text","isFill","ChartTitle","props","className","title","code","moment","basetime","format","validtime","ChartTypeSelector","React","useState","Object","keys","types","setType","items","map","key","MenuItem","FormControl","InputLabel","id","Select","labelId","onChange","e","target","handleChangeType","INITIAL_VIEW_STATE","longitude","latitude","zoom","chartTypes","App","chart","setChart","chartType","setChartType","useEffect","a","LATEST_URL","fetch","then","res","JSON","parse","latest","url","isobars","fronts","ices","fogs","windArrows","centerMarks","catch","err","console","error","chartTitle","chartGeoJsonLayers","data","stroked","d","filled","getFillColor","getLineColor","pointRadiusUnits","pointRadiusScale","getRadius","radius","lineWidthUnits","lineWidthScale","getLineWidth","parameters","depthTest","cull","getPolygonOffset","layerIndex","characterSet","k","chartTextLayers","getAlignmentBaseline","getAngle","getPosition","getSize","getText","getTextAnchor","sizeScale","getColor","getPixelOffset","sizeUnits","iconAtlas","iconMapping","getIcon","alphaCutoff","billboard","windSpeedKnot","windDegree","initialViewState","controller","getSourcePosition","getTargetPosition","getWidth","getPolygon","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sbAEaA,EAAc,WAOvB,IANA,IAGMC,EAAQ,GAGLC,GAAO,IAAKA,EAAM,IAAKA,GALnB,GAMT,IAAK,IAAIC,GAAO,GAAIA,EAAM,GAAIA,GAPxB,EAQFF,EAAMG,KAAK,CAAEC,MAAO,CAACH,EAAKC,GAAMG,IAAK,CAACJ,EAAKC,EARzC,GAQmDI,WAAY,CAAEC,KAAM,eAAMC,KAAK,GAAD,OAAKC,KAAKC,IAAIT,GAAd,eAAuBA,EAAM,EAAK,IAAM,QAKnI,IAAK,IAAIC,GAAO,GAAIA,EAAM,GAAIA,GAXjB,GAYT,IAAK,IAAID,GAAO,IAAKA,EAAM,IAAKA,GAd1B,EAeFD,EAAMG,KAAK,CAAEC,MAAO,CAACH,EAAKC,GAAMG,IAAK,CAACJ,EAfpC,EAe6CC,GAAMI,WAAY,CAAEC,KAAM,eAAMC,KAAK,GAAD,OAAKC,KAAKC,IAAIR,GAAd,eAAuBA,EAAM,EAAK,IAAM,QAInI,OAAOF,EApBgB,GAwBpB,SAASW,EAAUC,GACtB,IAD+B,EAGzBC,EAAM,GAHmB,cAITD,EAAQE,UAJC,IAI/B,2BAAwC,CAAC,IAA9BC,EAA6B,QACpC,OAAQA,EAAQT,WAAWC,MACvB,IAAK,2BACL,IAAK,2BACL,IAAK,2BACDM,EAAIV,KAAKY,GACT,MAEJ,IAAK,2BAKG,IADA,IAAMf,EAAQ,GACLgB,EAAI,EAAGA,EAAKD,EAAQE,SAASC,YAAYC,OAAS,EAAIH,IAC3DhB,EAAMG,KAAK,CAACY,EAAQE,SAASC,YAAYF,GAAID,EAAQE,SAASC,YAAYF,EAAI,KAGlF,IAAMI,EAAI,eAAQL,GACZM,EAAG,eAAQN,GACjBM,EAAIf,WAAJ,eAAsBS,EAAQT,YAC9Bc,EAAKd,WAAL,eAAuBS,EAAQT,YAC/Be,EAAIJ,SAAJ,eAAoBF,EAAQE,UAC5BG,EAAKH,SAAL,eAAqBF,EAAQE,UAC7BI,EAAIf,WAAWC,KAAO,mDACtBa,EAAKd,WAAWC,KAAO,mDACvBc,EAAIJ,SAASV,KAAO,kBACpBa,EAAKH,SAASV,KAAO,kBACrBc,EAAIJ,SAASC,YAAclB,EAAMsB,QAAO,SAACC,EAAMP,GAAP,OAAcQ,SAASR,EA9BhD,IA8B8E,IAAM,KACnGI,EAAKH,SAASC,YAAclB,EAAMsB,QAAO,SAACC,EAAMP,GAAP,OAAcQ,SAASR,EA/BjD,IA+B+E,IAAM,KAEpGH,EAAIV,KAAKkB,GACTR,EAAIV,KAAKiB,KAnCM,8BAyC/B,OAAOP,EAIJ,SAASY,EAAWb,GACvB,IADgC,EAG1BC,EAAM,GAHoB,cAIVD,EAAQE,UAJE,IAIhC,2BAAwC,CAAC,IAA9BC,EAA6B,QACpC,OAAQA,EAAQT,WAAWC,MACvB,IAAK,qBAGD,GAAKQ,EAAQT,WAAWoB,SAASC,MAAQ,KAAQ,EAAG,CAEhD,IAAMC,EAAM,eAAQb,GACpBa,EAAOtB,WAAWC,KAAO,6CACzBM,EAAIV,KAAKyB,QAEN,GAAIb,EAAQT,WAAWoB,SAASC,MAAQ,EAAG,CAI9C,IADA,IAAM3B,EAAQ,GACLgB,EAAI,EAAGA,EAAKD,EAAQE,SAASC,YAAYC,OAAS,EAAIH,IAC3DhB,EAAMG,KAAK,CAACY,EAAQE,SAASC,YAAYF,GAAID,EAAQE,SAASC,YAAYF,EAAI,KAGlF,IAAMY,EAAM,eAAQb,GACpBa,EAAOtB,WAAWC,KAAO,6CACzBqB,EAAOX,SAASV,KAAO,kBACvBqB,EAAOX,SAASC,YAAclB,EAAMsB,QAAO,SAACC,EAAMP,GAAP,OAAcQ,SAASR,EAzBnD,IAyBiF,IAAM,KACtGH,EAAIV,KAAKyB,QAGTf,EAAIV,KAAKY,KA9BO,8BAoChC,OAAOF,EAIJ,SAASgB,EAAWjB,GACvB,IAAMkB,EAAU,CAAC,eAAM,qBAAO,qBAAO,iCAAS,sBAC9C,OAAOlB,EAAQE,SAASQ,QAAO,SAAAS,GAAC,OAAID,EAAQE,SAASD,EAAEzB,WAAWC,SAI/D,SAAS0B,EAAerB,GAC3B,IAAMkB,EAAU,CAAC,oDACjB,OAAOlB,EAAQE,SAASQ,QAAO,SAAAS,GAAC,OAAID,EAAQE,SAASD,EAAEzB,WAAWC,SAI/D,SAAS2B,EAAQtB,GACpB,IAAMkB,EAAU,CAAC,mDAAY,gEAC7B,OAAOlB,EAAQE,SAASQ,QAAO,SAAAS,GAAC,OAAID,EAAQE,SAASD,EAAEzB,WAAWC,SAI/D,SAAS4B,EAAQvB,GACpB,IAAMkB,EAAU,CAAC,8CACjB,OAAOlB,EAAQE,SAASQ,QAAO,SAAAS,GAAC,OAAID,EAAQE,SAASD,EAAEzB,WAAWC,SClI/D,IAAM6B,EAAW,CACpB,qBAAO,CAAEC,MAAO,CAAC,IAAK,IAAK,KAAMC,UAAW,EAAGC,UAAU,GACzD,6CAAW,CAAEF,MAAO,CAAC,IAAK,IAAK,KAAMC,UAAW,EAAGC,UAAU,GAC7D,6CAAW,CAAEF,MAAO,CAAC,IAAK,IAAK,KAAMC,UAAW,EAAGC,UAAU,GAC7D,2BAAQ,CAAEF,MAAO,CAAC,GAAI,GAAI,KAAMC,UAAW,EAAGC,UAAU,GACxD,2BAAQ,CAAEF,MAAO,CAAC,IAAK,GAAI,IAAKC,UAAW,EAAGC,UAAU,GACxD,mDAAY,CAAEF,MAAO,CAAC,IAAK,GAAI,IAAKC,UAAW,EAAGC,UAAU,GAC5D,mDAAY,CAAEF,MAAO,CAAC,GAAI,GAAI,KAAMC,UAAW,EAAGC,UAAU,GAC5D,2BAAQ,CAAEF,MAAO,CAAC,IAAK,EAAG,KAAMC,UAAW,EAAGC,UAAU,GACxD,eAAM,CAAEC,KAAM,SAAKH,MAAO,CAAC,IAAK,EAAG,IACnC,qBAAO,CAAEG,KAAM,SAAKH,MAAO,CAAC,EAAG,EAAG,MAClC,qBAAO,CAAEG,KAAM,SAAKH,MAAO,CAAC,IAAK,EAAG,IACpC,iCAAS,CAAEG,KAAM,SAAKH,MAAO,CAAC,IAAK,EAAG,IACtC,qBAAO,CAAEG,KAAM,SAAKH,MAAO,CAAC,IAAK,EAAG,IACpC,mDAAY,CAAEA,MAAO,CAAC,IAAK,IAAK,MAChC,6CAAW,CAAEA,MAAO,CAAC,IAAK,IAAK,EAAG,IAAKI,QAAQ,GAC/C,mDAAY,CAAEJ,MAAO,CAAC,IAAK,IAAK,IAAK,KAAMI,QAAQ,GACnD,+DAAc,CAAEJ,MAAO,CAAC,IAAK,IAAK,IAAK,KAAMI,QAAQ,I,mCCH1CC,MAXf,SAAoBC,GAElB,OACE,0BAASC,UAAU,aAAnB,UACE,+BAAKD,EAAME,MAAMA,MAAjB,IAAyBF,EAAME,MAAMC,KAArC,SAA4CH,EAAME,MAAMtC,KAAxD,YACA,4CAAewC,IAAOJ,EAAME,MAAMG,UAAUC,YAC5C,6CAAgBF,IAAOJ,EAAME,MAAMK,WAAWD,gB,6CCqBrCE,MAxBf,SAA2BR,GAAQ,IAAD,EACRS,IAAMC,SAASC,OAAOC,KAAKZ,EAAMa,OAAO,IADhC,mBACzBjD,EADyB,KACnBkD,EADmB,KAG1BC,EAAQJ,OAAOC,KAAKZ,EAAMa,OAAOG,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAA,EAAD,CAAoBlC,MAAOiC,EAA3B,SAAiCA,GAAlBA,MAOjE,OACE,yBAAShB,UAAU,oBAAnB,SACE,eAACkB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,GAAG,6BAAf,yBACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,6BACdvC,MAAOpB,EACP4D,SAAU,SAAAC,GAAC,OAXF,SAACA,GAEhB,OADAX,EAAQW,EAAEC,OAAO1C,OACVgB,EAAM2B,iBAAiBF,EAAEC,OAAO1C,OASlBwC,CAASC,IAF1B,SAGGV,UCVLa,EAAqB,CACzBC,UAAW,IACXC,SAAU,GACVC,KAAM,KAKFC,EAAa,CACjB,OAAU,CAAEnE,KAAM,iCAASsC,KAAM,QACjC,OAAU,CAAEtC,KAAM,qEAAesC,KAAM,QACvC,OAAU,CAAEtC,KAAM,+CAAasC,KAAM,UACrC,OAAU,CAAEtC,KAAM,+FAAqBsC,KAAM,UAC7C,OAAU,CAAEtC,KAAM,+CAAasC,KAAM,UACrC,OAAU,CAAEtC,KAAM,+FAAqBsC,KAAM,WAgLhC8B,MA7Kf,WAAgB,IAAD,EACavB,mBAAS,MADtB,mBACNwB,EADM,KACCC,EADD,OAEqBzB,mBAASC,OAAOC,KAAKoB,GAAY,IAFtD,mBAENI,EAFM,KAEKC,EAFL,KAIbC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,6DACOC,EADP,sDACmEJ,EADnE,yBAGqBK,MAAMD,GACvBE,MAAK,SAAAC,GACJ,OAAOA,EAAI9C,UAEZ6C,MAAK,SAAA7C,GACJ,OAAO+C,KAAKC,MAAMhD,MAEnB6C,MAAK,SAAAI,GACJ,OAAOL,MAAM,sDAAD,OAAuDK,EAAO,GAAGC,SAE9EL,MAAK,SAAAC,GACJ,OAAOA,EAAI9C,UAEZ6C,MAAK,SAAA7C,GACJ,OAAO+C,KAAKC,MAAMhD,MAEnB6C,MAAK,SAAAzE,GAEJ,IAAMiC,EAAK,2BAAQjC,EAAQN,YAAhB,IAA4BC,KAAMwE,EAAWjC,KAAM6B,EAAWI,GAAWjC,OAC9E6C,EAAUlE,EAAWb,GACrBgF,EAASjF,EAAUC,GACnBiF,EAAO3D,EAAQtB,GACfkF,EAAO3D,EAAQvB,GAGrB,MAAO,CAAEgF,OAAQA,EAAQD,QAASA,EAAS9C,MAAOA,EAAOkD,WAFtC9D,EAAerB,GAE+CoF,YAD7DnE,EAAWjB,GAC4EiF,KAAMA,EAAMC,KAAMA,MAE9HG,OAAM,SAACC,GACNC,QAAQC,MAAR,UAAiBF,OA/BtB,OAGOrB,EAHP,OAkCCC,EAASD,GAlCV,0CAAD,KAoCC,CAACE,IAGJ,IAAMsB,EAAaxB,GAAU,cAAC,EAAD,CAAYhC,MAAOgC,EAAMhC,QAEhDyD,EAAqBzB,GAAU,CACnC,CAAEb,GAAG,qBAAuBuC,KAAM1B,EAAMc,SACxC,CAAE3B,GAAG,oBAAsBuC,KAAM1B,EAAMe,QACvC,CAAE5B,GAAG,kBAAoBuC,KAAM1B,EAAMgB,MACrC,CAAE7B,GAAG,kBAAoBuC,KAAM1B,EAAMiB,OACpCnC,KAAI,SAAA5B,GACL,OAAQ,cAAC,IAAD,CAAciC,GAAIjC,EAAEiC,GAC1BuC,KAAMxE,EAAEwE,KAERC,QAAS,SAAAC,GAAC,QAAIrE,EAASqE,EAAEnG,WAAWC,MAAMgC,UAAWH,EAASqE,EAAEnG,WAAWC,MAAMgC,UACjFmE,OAAQ,SAAAD,GAAC,QAAIrE,EAASqE,EAAEnG,WAAWC,MAAMkC,QAASL,EAASqE,EAAEnG,WAAWC,MAAMkC,QAE9EkE,aAAc,SAAAF,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAM8B,OAC/CuE,aAAc,SAAAH,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAM8B,OAE/CwE,iBAAkB,SAClBC,iBAAkB,EAClBC,UAAW,SAAAN,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAMyG,OAAS5E,EAASqE,EAAEnG,WAAWC,MAAMyG,OAAS,GAE1FC,eAAgB,SAChBC,eAAgB,EAChBC,aAAc,SAAAV,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAM+B,UAAYF,EAASqE,EAAEnG,WAAWC,MAAM+B,UAAY,GAEnG8E,WAAY,CAAEC,WAAW,EAAMC,MAAM,GACrCC,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,GAAI,WAKzCC,EAAenE,OAAOC,KAAKnB,GAAUuB,KAAI,SAAA+D,GAAC,OAAItF,EAASsF,MAAIpG,QAAO,SAAAS,GAAC,OAAIA,EAAES,QAAMmB,KAAI,SAAA5B,GAAC,OAAIA,EAAES,QAC1FmF,EAAkB9C,GACtB,cAAC,IAAD,CAAWb,GAAE,mBACXuC,KAAM1B,EAAMmB,YACZ4B,qBAAsB,SACtBC,SAAU,EACVC,YAAa,SAAArB,GAAC,OAAIA,EAAExF,SAASC,aAC7B6G,QAAS,GACTC,QAAS,SAAAvB,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAMiC,MAC1CiF,aAAcA,EACdQ,cAAe,SACfC,UAAW,EACXC,SAAU,SAAA1B,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAM8B,OAC3C+F,eAAgB,CAAC,GAAI,IACrBb,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,GAAI,QAIzCxB,EAAcnB,GAAU,cAAE,IAAF,CAAYb,GAAG,0BAC3CuC,KAAM1B,EAAMmB,YACZqC,UAAW,SAEXC,UAAW,wBACXC,YAAa,yBACbC,QAAS,SAAA/B,GAAC,MAAI,UACdqB,YAAa,SAAArB,GAAC,OAAIA,EAAExF,SAASC,aAC7B6G,QAAS,SAAAtB,GAAC,OAAI,IACd0B,SAAU,SAAA1B,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAM8B,OAC3CoG,YAAa,GACbC,WAAW,EACXnB,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,GAAI,QAGvCzB,EAAalB,GAAU,cAAE,IAAF,CAAYb,GAAG,yBAC1CuC,KAAM1B,EAAMkB,WACZsC,UAAW,SAEXC,UAAW,uBACXC,YAAa,wBACbC,QAAS,SAAA/B,GAAC,OAAIA,EAAEnG,WAAWqI,cAAchH,OACzCmG,YAAa,SAAArB,GAAC,OAAIA,EAAExF,SAASC,aAC7B6G,QAAS,SAAAtB,GAAC,OAAI,IACd0B,SAAU,SAAA1B,GAAC,OAAIrE,EAASqE,EAAEnG,WAAWC,MAAM8B,OAC3CoG,YAAa,GACbC,WAAW,EACXb,SAAU,SAAApB,GAAC,OAAI,IAAQA,EAAEnG,WAAWsI,WAAWjH,OAC/C4F,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,GAAI,QAG7C,OACE,eAAC,WAAD,WACGnB,EAED,cAAC,EAAD,CACE7C,MAAOmB,EACPL,iBAAgB,uCAAG,WAAO/D,GAAP,SAAA2E,EAAA,sDAAkBF,EAAazE,GAA/B,2CAAH,wDAElB,eAAC,IAAD,CACEsI,iBAAkBtE,EAClBuE,YAAY,EAFd,UAIG9C,EACAD,EACAO,EACAqB,EAED,cAAE,IAAF,CAAY3D,GAAG,oBACbuC,KAAMxG,EACNgJ,kBAAmB,SAAAtC,GAAC,OAAIA,EAAErG,OAC1B4I,kBAAmB,SAAAvC,GAAC,OAAIA,EAAEpG,KAC1B8H,SAAU,CAAC,IAAK,IAAK,KACrBc,SAAU,EACV1B,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,GAAI,QAG7C,cAAC,IAAD,CAAcxD,GAAG,YACfuC,KAlKM,+EAmKNG,QAAQ,EACRC,aAAc,CAAC,GAAI,GAAI,IACvBS,WAAY,CAAEC,WAAW,EAAMC,MAAM,GACrCC,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,GAAI,QAG7C,cAAC,IAAD,CAAmBxD,GAAG,aACpBuC,KAAM,CAAC,CAAC,EAAE,IAAK,IAAK,CAAC,EAAG,IAAK,CAAC,IAAK,IAAK,CAAC,KAAM,IAAK,CAAC,GAAI,IAAK,EAAE,KAAM,MACtE2C,WAAY,SAAAzC,GAAC,OAAIA,GACjBC,QAAQ,EACRC,aAAc,CAAC,GAAI,GAAI,IACvBS,WAAY,CAAEC,WAAW,EAAMC,MAAM,GACrCC,iBAAkB,cAAGC,WAAH,MAAoB,CAAC,EAAG,QAG5C,cAAC,IAAD,CAAWxD,GAAG,MAAMmF,MAAM,OAAOL,YAAY,WC1LtCM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjE,MAAK,YAAkD,IAA/CkE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c5ba8005.chunk.js","sourcesContent":["\n// LineLayer の緯線経線データを返す。\nexport const latlonline = (() => {\n    const d = 1;  // [°]。精度みたいなもの。\n    const dlon = 10;  // [°]。\n    const dlat = 10;  // [°]。\n    const lines = [];\n\n    // 経線\n    for (let lon = -180; lon < 180; lon += dlon) {\n        for (let lat = -80; lat < 80; lat += d) {\n            lines.push({ start: [lon, lat], end: [lon, lat + d], properties: { type: '経線', name: `${Math.abs(lon)}°${(lon < 0) ? 'W' : 'E'}` } });\n        }\n    }\n\n    // 緯線\n    for (let lat = -80; lat < 90; lat += dlat) {\n        for (let lon = -180; lon < 180; lon += d) {\n            lines.push({ start: [lon, lat], end: [lon + d, lat], properties: { type: '緯線', name: `${Math.abs(lat)}°${(lat < 0) ? 'S' : 'N'}` } });\n        }\n    }\n\n    return lines;\n})();\n\n// 前線を返す。\nexport function getFronts(geojson) {\n    const STATIONARY_FRONT_SPACE = 20;  // 停滞前線の奇数偶数区間の間隔\n\n    const ret = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '寒冷前線':\n            case '温暖前線':\n            case '閉塞前線':\n                ret.push(feature);\n                break;\n\n            case '停滞前線':\n                {\n                    // 偶数区間と奇数区間を交互に色分けする表現。破線にした feature を生成して追加する。元の'停滞前線'は削除する。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    const even = { ...feature };\n                    const odd = { ...feature };\n                    odd.properties = { ...feature.properties };\n                    even.properties = { ...feature.properties };\n                    odd.geometry = { ...feature.geometry };\n                    even.geometry = { ...feature.geometry };\n                    odd.properties.type = '停滞前線（奇数）';\n                    even.properties.type = '停滞前線（偶数）';\n                    odd.geometry.type = 'MultiLineString';\n                    even.geometry.type = 'MultiLineString';\n                    odd.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 === 0));\n                    even.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 !== 0));\n\n                    ret.push(odd);\n                    ret.push(even);\n                }\n                break;\n        }\n    }\n\n    return ret;\n}\n\n// 等圧線を返す。\nexport function getIsobars(geojson) {\n    const AUXILIARY_ISOBAR_SPACE = 10;  // 等圧線の補助線の破線間隔\n\n    const ret = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '等圧線':\n                // レンダリングに必要な情報を補足する。\n\n                if ((feature.properties.pressure.value % 20) === 0) {\n                    // 20hPa 毎の主線。元の feature を上書きする。\n                    const isobar = { ...feature }\n                    isobar.properties.type = '等圧線（主線）';\n                    ret.push(isobar);\n\n                } else if (feature.properties.pressure.value % 4) {\n                    // 補助線。元の feature を破線で上書きする。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    const isobar = { ...feature }\n                    isobar.properties.type = '等圧線（補助）';\n                    isobar.geometry.type = 'MultiLineString';\n                    isobar.geometry.coordinates = lines.filter((line, i) => (parseInt(i / AUXILIARY_ISOBAR_SPACE) % 2 === 0));\n                    ret.push(isobar);\n\n                } else {\n                    ret.push(feature);\n                }\n                break;\n        }\n    }\n\n    return ret;\n}\n\n// 高気圧・低気圧などの中心マークを返す。\nexport function getCenters(geojson) {\n    const targets = ['台風', '低気圧', '高気圧', '熱帯低気圧', '低圧部'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}\n\n// 悪天情報の強風を返す。\nexport function getStrongWinds(geojson) {\n    const targets = ['悪天情報（強風）'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}\n\n// 悪天情報の海氷・船体着氷を返す。\nexport function getIces(geojson) {\n    const targets = ['悪天情報（海氷）', '悪天情報（船体着氷）'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}\n\n// 悪天情報の霧を返す。\nexport function getFogs(geojson) {\n    const targets = ['悪天情報（霧）'];\n    return geojson.features.filter(x => targets.includes(x.properties.type));\n}","\nexport const settings = {\n    '等圧線': { color: [222, 222, 222], lineWidth: 2, isStroke: true },\n    '等圧線（主線）': { color: [222, 222, 222], lineWidth: 4, isStroke: true },\n    '等圧線（補助）': { color: [222, 222, 222], lineWidth: 2, isStroke: true, },\n    '寒冷前線': { color: [64, 64, 255], lineWidth: 4, isStroke: true },\n    '温暖前線': { color: [255, 64, 64], lineWidth: 4, isStroke: true },\n    '停滞前線（奇数）': { color: [255, 64, 64], lineWidth: 4, isStroke: true },\n    '停滞前線（偶数）': { color: [64, 64, 255], lineWidth: 4, isStroke: true },\n    '閉塞前線': { color: [128, 0, 255], lineWidth: 4, isStroke: true },\n    '台風': { text: '台', color: [255, 0, 0], },\n    '高気圧': { text: '高', color: [0, 0, 255], },\n    '低気圧': { text: '低', color: [255, 0, 0], },\n    '熱帯低気圧': { text: '熱', color: [255, 0, 0], },\n    '低圧部': { text: '低', color: [255, 0, 0], },\n    '悪天情報（強風）': { color: [127, 127, 127], },\n    '悪天情報（霧）': { color: [255, 255, 0, 32], isFill: true },\n    '悪天情報（海氷）': { color: [192, 192, 255, 127], isFill: true },\n    '悪天情報（船体着氷）': { color: [255, 127, 255, 127], isFill: true },\n};\n","import React from 'react';\nimport './ChartTitle.css';\nimport moment from 'moment';\n\nfunction ChartTitle(props) {\n\n  return (\n    <article className='ChartTitle'>\n      <h1>{props.title.title} {props.title.code}（{props.title.type}）</h1>\n      <p>basetime : {moment(props.title.basetime).format()}</p>\n      <p>validtime : {moment(props.title.validtime).format()}</p>\n    </article>\n  );\n}\n\nexport default ChartTitle;\n","import React from 'react';\nimport './ChartTypeSelector.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nfunction ChartTypeSelector(props) {\n  const [type, setType] = React.useState(Object.keys(props.types)[0]);\n\n  const items = Object.keys(props.types).map(key => <MenuItem key={key} value={key}>{key}</MenuItem>);\n\n  const onChange = (e) => {\n    setType(e.target.value);\n    return props.handleChangeType(e.target.value)\n  }\n\n  return (\n    <article className='ChartTypeSelector'>\n      <FormControl >\n        <InputLabel id=\"chartselector-select-label\">jmaxml type</InputLabel>\n        <Select labelId=\"chartselector-select-label\"\n          value={type}\n          onChange={e => onChange(e)} >\n          {items}\n        </Select>\n      </FormControl>\n    </article>\n  );\n}\n\nexport default ChartTypeSelector;\n","import './App.css';\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, SolidPolygonLayer, LineLayer, TextLayer, IconLayer } from '@deck.gl/layers';\nimport { _GlobeView as GlobeView } from '@deck.gl/core';\nimport { latlonline, getFronts, getIsobars, getStrongWinds, getCenters, getIces, getFogs } from './utils'\nimport { settings } from './settings'\nimport ChartTitle from './components/ChartTitle'\nimport ChartTypeSelector from './components/ChartTypeSelector'\n\n\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: 140.0,\n  latitude: 40.0,\n  zoom: 1.2,\n};\n\nconst MAP_URL = 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_land.geojson';\n\nconst chartTypes = {\n  'VZSA50': { name: '地上実況図', code: 'SPAS' },\n  'VZSA60': { name: 'アジア太平洋地上実況図', code: 'ASAS' },\n  'VZSF50': { name: '地上24時間予想図', code: 'FSAS24' },\n  'VZSF60': { name: 'アジア太平洋海上悪天24時間予想図', code: 'FSAS24' },\n  'VZSF51': { name: '地上48時間予想図', code: 'FSAS48' },\n  'VZSF61': { name: 'アジア太平洋海上悪天48時間予想図', code: 'FSAS48' },\n};\n\nfunction App() {\n  const [chart, setChart] = useState(null);\n  const [chartType, setChartType] = useState(Object.keys(chartTypes)[0]);\n\n  useEffect(() => {\n    (async () => {\n      const LATEST_URL = `https://jma-xml-api-mrfbzypr4q-an.a.run.app/${chartType}/latest.json`;\n\n      const chart = await fetch(LATEST_URL)\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(latest => {\n          return fetch(`https://xml2chart-api-mrfbzypr4q-an.a.run.app/?url=${latest[0].url}`)\n        })\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(geojson => {\n          // レンダリングに必要な情報を補足する。\n          const title = { ...geojson.properties, type: chartType, code: chartTypes[chartType].code };\n          const isobars = getIsobars(geojson);\n          const fronts = getFronts(geojson);\n          const ices = getIces(geojson);\n          const fogs = getFogs(geojson);\n          const windArrows = getStrongWinds(geojson);\n          const centerMarks = getCenters(geojson);\n          return { fronts: fronts, isobars: isobars, title: title, windArrows: windArrows, centerMarks: centerMarks, ices: ices, fogs: fogs };\n        })\n        .catch((err) => {\n          console.error(`${err}`);\n        });\n\n      setChart(chart);\n    })();\n  }, [chartType]);\n\n\n  const chartTitle = chart && (<ChartTitle title={chart.title} />);\n\n  const chartGeoJsonLayers = chart && ([\n    { id: `chart-isobar-layer`, data: chart.isobars },\n    { id: `chart-front-layer`, data: chart.fronts },\n    { id: `chart-ice-layer`, data: chart.ices },\n    { id: `chart-fog-layer`, data: chart.fogs },\n  ]).map(x => {\n    return (<GeoJsonLayer id={x.id}\n      data={x.data}\n\n      stroked={d => settings[d.properties.type].isStroke ? settings[d.properties.type].isStroke : false}\n      filled={d => settings[d.properties.type].isFill ? settings[d.properties.type].isFill : false}\n\n      getFillColor={d => settings[d.properties.type].color}\n      getLineColor={d => settings[d.properties.type].color}\n\n      pointRadiusUnits={'pixels'}\n      pointRadiusScale={1}\n      getRadius={d => settings[d.properties.type].radius ? settings[d.properties.type].radius : 0}\n\n      lineWidthUnits={'pixels'}\n      lineWidthScale={1}\n      getLineWidth={d => settings[d.properties.type].lineWidth ? settings[d.properties.type].lineWidth : 0}\n\n      parameters={{ depthTest: true, cull: true }}\n      getPolygonOffset={({ layerIndex }) => [0, -20000]}\n    />)\n  })\n\n\n  const characterSet = Object.keys(settings).map(k => settings[k]).filter(x => x.text).map(x => x.text);\n  const chartTextLayers = chart && (\n    <TextLayer id={`chart-text-layer`}\n      data={chart.centerMarks}\n      getAlignmentBaseline={'center'}\n      getAngle={0}\n      getPosition={d => d.geometry.coordinates}\n      getSize={32}\n      getText={d => settings[d.properties.type].text}\n      characterSet={characterSet}\n      getTextAnchor={'middle'}\n      sizeScale={1}\n      getColor={d => settings[d.properties.type].color}\n      getPixelOffset={[20, 20]}\n      getPolygonOffset={({ layerIndex }) => [0, -90000]}\n    />\n  );\n\n  const centerMarks = chart && (< IconLayer id='chart-center-mark-layer'\n    data={chart.centerMarks}\n    sizeUnits={'pixels'}\n\n    iconAtlas={'chart-center-mark.png'}\n    iconMapping={'chart-center-mark.json'}\n    getIcon={d => 'center'}\n    getPosition={d => d.geometry.coordinates}\n    getSize={d => 20}\n    getColor={d => settings[d.properties.type].color}\n    alphaCutoff={.5}\n    billboard={false}\n    getPolygonOffset={({ layerIndex }) => [0, -10000]}\n  />);\n\n  const windArrows = chart && (< IconLayer id='chart-wind-arrow-layer'\n    data={chart.windArrows}\n    sizeUnits={'pixels'}\n\n    iconAtlas={'chart-wind-arrow.png'}\n    iconMapping={'chart-wind-arrow.json'}\n    getIcon={d => d.properties.windSpeedKnot.value}\n    getPosition={d => d.geometry.coordinates}\n    getSize={d => 50}\n    getColor={d => settings[d.properties.type].color}\n    alphaCutoff={.5}\n    billboard={false}\n    getAngle={d => 360.0 - d.properties.windDegree.value}\n    getPolygonOffset={({ layerIndex }) => [0, -10000]}\n  />);\n\n  return (\n    <Fragment>\n      {chartTitle}\n\n      <ChartTypeSelector\n        types={chartTypes}\n        handleChangeType={(async (type) => { setChartType(type); })} />\n\n      <DeckGL\n        initialViewState={INITIAL_VIEW_STATE}\n        controller={true}\n      >\n        {centerMarks}\n        {windArrows}\n        {chartGeoJsonLayers}\n        {chartTextLayers}\n\n        < LineLayer id='latlon-line-layer'\n          data={latlonline}\n          getSourcePosition={d => d.start}\n          getTargetPosition={d => d.end}\n          getColor={[127, 127, 127]}\n          getWidth={1}\n          getPolygonOffset={({ layerIndex }) => [0, -10000]}\n        />\n\n        <GeoJsonLayer id=\"map-layer\"\n          data={MAP_URL}\n          filled={true}\n          getFillColor={[64, 64, 64]}\n          parameters={{ depthTest: true, cull: true }}\n          getPolygonOffset={({ layerIndex }) => [0, -10000]}\n        />\n\n        <SolidPolygonLayer id='background'\n          data={[[[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]]}\n          getPolygon={d => d}\n          filled={true}\n          getFillColor={[32, 32, 32]}\n          parameters={{ depthTest: true, cull: true }}\n          getPolygonOffset={({ layerIndex }) => [0, 10000]}\n        />\n\n        <GlobeView id=\"map\" width=\"100%\" controller={true} />\n      </DeckGL>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}