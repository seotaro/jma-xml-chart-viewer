{"version":3,"sources":["settings.js","utils.js","components/ChartTitle.js","App.js","reportWebVitals.js","index.js"],"names":["settings","color","lineWidth","isStroke","text","radius","isFill","latlonline","lines","lon","lat","push","start","end","properties","type","name","Math","abs","modifyChartGeojson","geojson","addFeatures","deleteFeatures","features","feature","pressure","value","i","geometry","coordinates","length","filter","line","parseInt","even","odd","includes","createChartTexts","chart","texts","title","Title","props","className","moment","basetime","format","validtime","INITIAL_VIEW_STATE","longitude","latitude","zoom","chartType","LATEST_URL","App","useState","setChart","useEffect","a","fetch","then","res","JSON","parse","latest","url","catch","err","console","error","chartLayers","id","data","stroked","d","filled","getFillColor","getLineColor","pointRadiusUnits","pointRadiusScale","getRadius","lineWidthUnits","lineWidthScale","getLineWidth","parameters","depthTest","cull","getPolygonOffset","layerIndex","characterSet","Object","keys","map","k","x","chartTextLayers","getAlignmentBaseline","getAngle","getPosition","getSize","getText","getTextAnchor","sizeScale","getColor","getPixelOffset","chartTitle","initialViewState","controller","getSourcePosition","getTargetPosition","getWidth","getPolygon","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.950d00a7.chunk.js","sourcesContent":["\nexport const settings = {\n    '等圧線': { color: [222, 222, 222], lineWidth: 2, isStroke: true },\n    '等圧線（主線）': { color: [222, 222, 222], lineWidth: 4, isStroke: true },\n    '等圧線（補助）': { color: [222, 222, 222], lineWidth: 2, isStroke: true, },\n    '寒冷前線': { color: [64, 64, 255], lineWidth: 4, isStroke: true },\n    '温暖前線': { color: [255, 64, 64], lineWidth: 4, isStroke: true },\n    '停滞前線（奇数）': { color: [255, 64, 64], lineWidth: 4, isStroke: true },\n    '停滞前線（偶数）': { color: [64, 64, 255], lineWidth: 4, isStroke: true },\n    '閉塞前線': { color: [128, 0, 255], lineWidth: 4, isStroke: true },\n    '台風': { text: '台', color: [255, 0, 0], },\n    '高気圧': { text: '高', color: [0, 0, 255], },\n    '低気圧': { text: '低', color: [255, 0, 0], },\n    '熱帯低気圧': { text: '熱', color: [255, 0, 0], },\n    '低圧部': { text: '低', color: [255, 0, 0], },\n    '悪天情報（強風）': { color: [255, 0, 0], radius: 4, isFill: true },\n    '悪天情報（霧）': { color: [255, 0, 255, 64], lineWidth: 4, isFill: true },\n    '悪天情報（海氷）': { color: [192, 192, 255, 127], isFill: true },\n};\n","import { settings } from './settings'\n\n// LineLayer の緯線経線データ\nexport const latlonline = (() => {\n    const d = 1;  // [°]。精度みたいなもの。\n    const dlon = 10;  // [°]。\n    const dlat = 10;  // [°]。\n    const lines = [];\n\n    // 経線\n    for (let lon = -180; lon < 180; lon += dlon) {\n        for (let lat = -80; lat < 80; lat += d) {\n            lines.push({ start: [lon, lat], end: [lon, lat + d], properties: { type: '経線', name: `${Math.abs(lon)}°${(lon < 0) ? 'W' : 'E'}` } });\n        }\n    }\n\n    // 緯線\n    for (let lat = -80; lat < 90; lat += dlat) {\n        for (let lon = -180; lon < 180; lon += d) {\n            lines.push({ start: [lon, lat], end: [lon + d, lat], properties: { type: '緯線', name: `${Math.abs(lat)}°${(lat < 0) ? 'S' : 'N'}` } });\n        }\n    }\n\n    return lines;\n})();\n\n// レンダリングに必要な情報を補足する。\nexport function modifyChartGeojson(geojson) {\n    const AUXILIARY_ISOBAR_SPACE = 10;  // 等圧線の補助線の破線間隔\n    const STATIONARY_FRONT_SPACE = 20;  // 停滞前線の奇数偶数区間の間隔\n\n    const addFeatures = [];\n    const deleteFeatures = [];\n    for (const feature of geojson.features) {\n        switch (feature.properties.type) {\n            case '等圧線':\n                if ((feature.properties.pressure.value % 20) === 0) {\n                    // 20hPa 毎の主線。元の feature を上書きする。\n                    feature.properties.type = '等圧線（主線）';\n\n                } else if (feature.properties.pressure.value % 4) {\n                    // 補助線。元の feature を破線で上書きする。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    feature.properties.type = '等圧線（補助）';\n                    feature.geometry.type = 'MultiLineString';\n                    feature.geometry.coordinates = lines.filter((line, i) => (parseInt(i / AUXILIARY_ISOBAR_SPACE) % 2 === 0));\n                }\n                break;\n\n            case '停滞前線':\n                {\n                    // 偶数区間と奇数区間を交互に色分けする表現。破線にした feature を生成して追加する。元の'停滞前線'は削除する。\n\n                    const lines = [];\n                    for (let i = 0; i < (feature.geometry.coordinates.length - 1); i++) {\n                        lines.push([feature.geometry.coordinates[i], feature.geometry.coordinates[i + 1]]);\n                    }\n\n                    const even = { ...feature };\n                    const odd = { ...feature };\n                    odd.properties = { ...feature.properties };\n                    even.properties = { ...feature.properties };\n                    odd.geometry = { ...feature.geometry };\n                    even.geometry = { ...feature.geometry };\n                    odd.properties.type = '停滞前線（奇数）';\n                    even.properties.type = '停滞前線（偶数）';\n                    odd.geometry.type = 'MultiLineString';\n                    even.geometry.type = 'MultiLineString';\n                    odd.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 === 0));\n                    even.geometry.coordinates = lines.filter((line, i) => (parseInt(i / STATIONARY_FRONT_SPACE) % 2 !== 0));\n\n                    addFeatures.push(odd);\n                    addFeatures.push(even);\n\n                    deleteFeatures.push(feature);\n                }\n                break;\n        }\n    }\n\n    geojson.features = geojson.features.filter(feature => !deleteFeatures.includes(feature));\n\n    for (const feature of addFeatures) {\n        geojson.features.push(feature);\n    }\n\n    return geojson;\n}\n\nexport function createChartTexts(chart) {\n    const texts = [];\n    for (const feature of chart.features) {\n        switch (feature.properties.type) {\n            case '台風':\n            case '低気圧':\n            case '高気圧':\n            case '熱帯低気圧':\n            case '低圧部':\n                texts.push({ title: settings[feature.properties.type].text, type: feature.properties.type, coordinates: feature.geometry.coordinates });\n                break;\n        }\n    }\n    return texts;\n}\n","import React from 'react';\nimport './ChartTitle.css';\nimport moment from 'moment';\n\nfunction Title(props) {\n\n  return (\n    <article className='ChartTitle'>\n      <h1>{props.title.title}（{props.title.type}）</h1>\n      <p>basetime : {moment(props.title.basetime).format()}</p>\n      <p>validtime : {moment(props.title.validtime).format()}</p>\n    </article>\n  );\n}\n\nexport default Title;\n","import './App.css';\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, SolidPolygonLayer, LineLayer, TextLayer } from '@deck.gl/layers';\nimport { _GlobeView as GlobeView } from '@deck.gl/core';\nimport { latlonline, modifyChartGeojson, createChartTexts } from './utils'\nimport { settings } from './settings'\nimport ChartTitle from './components/ChartTitle'\n\n\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: 140.0,\n  latitude: 40.0,\n  zoom: 1.2,\n};\n\nconst MAP_URL = 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_land.geojson';\n\nconst chartType = 'VZSA60';\nconst LATEST_URL = `https://jma-xml-api-mrfbzypr4q-an.a.run.app/${chartType}/latest.json`;\n\nfunction App() {\n  const [chart, setChart] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n\n      const chart = await fetch(LATEST_URL)\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(latest => {\n          return fetch(`https://xml2chart-api-mrfbzypr4q-an.a.run.app/?url=${latest[0].url}`)\n        })\n        .then(res => {\n          return res.text();\n        })\n        .then(text => {\n          return JSON.parse(text);\n        })\n        .then(geojson => {\n          // レンダリングに必要な情報を補足する。\n          geojson = modifyChartGeojson(geojson);\n          const texts = createChartTexts(geojson);\n          const title = { ...geojson.properties, type: chartType };\n          return { geojson: geojson, texts: texts, title: title };\n        })\n        .catch((err) => {\n          console.error(`${err}`);\n        });\n\n      setChart(chart);\n    })();\n  }, []);\n\n\n  const chartLayers = chart && (\n    <GeoJsonLayer id={`chart-shape-layer`}\n      data={chart.geojson}\n\n      stroked={d => settings[d.properties.type].isStroke ? settings[d.properties.type].isStroke : false}\n      filled={d => settings[d.properties.type].isFill ? settings[d.properties.type].isFill : false}\n\n      getFillColor={d => settings[d.properties.type].color}\n      getLineColor={d => settings[d.properties.type].color}\n\n      pointRadiusUnits={'pixels'}\n      pointRadiusScale={1}\n      getRadius={d => settings[d.properties.type].radius ? settings[d.properties.type].radius : 0}\n\n      lineWidthUnits={'pixels'}\n      lineWidthScale={1}\n      getLineWidth={d => settings[d.properties.type].lineWidth ? settings[d.properties.type].lineWidth : 0}\n\n      parameters={{ depthTest: true, cull: true }}\n      getPolygonOffset={({ layerIndex }) => [0, -20000]}\n    />\n  );\n\n\n  const characterSet = Object.keys(settings).map(k => settings[k]).filter(x => x.text).map(x => x.text);\n  const chartTextLayers = chart && (\n    <TextLayer id={`chart-text-layer`}\n      data={chart.texts}\n      getAlignmentBaseline={'center'}\n      getAngle={0}\n      getPosition={d => d.coordinates}\n      getSize={32}\n      getText={d => d.title}\n      characterSet={characterSet}\n      getTextAnchor={'middle'}\n      sizeScale={1}\n      getColor={d => settings[d.type].color}\n      getPixelOffset={[20, 20]}\n      getPolygonOffset={({ layerIndex }) => [0, -90000]}\n    />\n  );\n\n  const chartTitle = chart && (<ChartTitle title={chart.title} />);\n\n  return (\n    <Fragment>\n      {chartTitle}\n      <DeckGL\n        initialViewState={INITIAL_VIEW_STATE}\n        controller={true}\n      >\n\n        {chartLayers}\n        {chartTextLayers}\n\n        < LineLayer id='latlon-line-layer'\n          data={latlonline}\n\n          getSourcePosition={d => d.start}\n          getTargetPosition={d => d.end}\n\n          getColor={[127, 127, 127]}\n          getWidth={1}\n\n          getPolygonOffset={({ layerIndex }) => [0, -10000]}\n        />\n\n        <GeoJsonLayer id=\"map-layer\"\n          data={MAP_URL}\n\n          filled={true}\n\n          getFillColor={[64, 64, 64]}\n\n          parameters={{ depthTest: true, cull: true }}\n          getPolygonOffset={({ layerIndex }) => [0, -10000]}\n        />\n\n        <SolidPolygonLayer id='background'\n          data={[[[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]]}\n          getPolygon={d => d}\n\n          filled={true}\n          getFillColor={[32, 32, 32]}\n\n          parameters={{ depthTest: true, cull: true }}\n          getPolygonOffset={({ layerIndex }) => [0, 10000]}\n        />\n\n        <GlobeView id=\"map\" width=\"100%\" controller={true} />\n      </DeckGL>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}